//
// Created by LEI XU on 4/27/19.
//

#ifndef RASTERIZER_TEXTURE_H
#define RASTERIZER_TEXTURE_H
#include "global.hpp"
#include <eigen3/Eigen/Eigen>
#include <eigen3/Eigen/src/Core/Matrix.h>
#include <opencv2/opencv.hpp>
class Texture{
private:
    cv::Mat image_data;

public:
    Texture(const std::string& name)
    {
        image_data = cv::imread(name);
        cv::cvtColor(image_data, image_data, cv::COLOR_RGB2BGR);
        width = image_data.cols;
        height = image_data.rows;
    }

    int width, height;

    Eigen::Vector3f getColor(float u, float v)
    {
        auto u_img = u * width;
        auto v_img = (1 - v) * height;
        auto color = image_data.at<cv::Vec3b>(v_img, u_img);
        return Eigen::Vector3f(color[0], color[1], color[2]);
    }

    Eigen::Vector3f getColorBilinear(float u, float v) {
      auto u_img = u * width;
      auto v_img = (1 - v) * height;
      auto u_img_l = std::floor(u_img);
      auto v_img_l = std::floor(v_img);
      auto u_img_r = std::ceil(u_img);
      auto v_img_r = std::ceil(v_img);
      auto col_lb = image_data.at<cv::Vec3b>(v_img_l, u_img_l);
      auto col_lt = image_data.at<cv::Vec3b>(v_img_l, u_img_r);
      auto col_rb = image_data.at<cv::Vec3b>(v_img_r, u_img_l);
      auto col_rt = image_data.at<cv::Vec3b>(v_img_r, u_img_r);
      auto s = v_img - v_img_l;
      auto t = u_img - u_img_l;
      auto col_b = col_lb + s * (col_rb - col_lb);
      auto col_t = col_lt + s * (col_rt - col_lt);
      auto color = col_b + t * (col_t - col_b);
      return Eigen::Vector3f(color[0], color[1], color[2]);
    }

};
#endif //RASTERIZER_TEXTURE_H
